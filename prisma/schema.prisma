// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  name      String
  imageUrl  String
  email     String

  servers   Server[]
  members   Member[]
  channels  Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  imageUrl  String
  inviteCode String  @unique

  profileId String @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])

  members   Member[]
  channels  Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role      MemberRole @default(GUEST)

  profileId String @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])

  serverId  String @db.ObjectId
  server    Server  @relation(fields: [serverId], references: [id])

  messages  Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      ChannelType @default(TEXT)
  profileId String @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])

  serverId  String @db.ObjectId
  server    Server  @relation(fields: [serverId], references: [id])

  messages  Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String

  fileUrl   String?

  memberId  String @db.ObjectId
  member    Member  @relation(fields: [memberId], references: [id])

  channelId String @db.ObjectId
  channel   Channel @relation(fields: [channelId], references: [id])

  deleted   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  memberOneId String @db.ObjectId
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id])

  memberTwoId String @db.ObjectId
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id])

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  fileUrl     String?

  memberId    String @db.ObjectId
  member      Member @relation(fields: [memberId], references: [id])

  conversationId String @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  deleted     Boolean @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
